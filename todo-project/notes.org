* todo project

** Desired Features

- [X] cross out done items
- [X] hide done items
- [X] save all items on server

** Technical details

*** To-do object
#+BEGIN_SRC "javascript"
todoOject = {
  text: 'go shopping',
  done: true | false,
}

appSettings = {
  hideDoneItems: true | false,
  useDarkMode: true | false,
}
#+END_SRC

*** Flow
**** Client side
- enter / edit text
- toggle done
- display list
  - respect app settings
- sync list with server
  - on save / edit etc

**** Server side
- read list
- send list
- save list

***** OOP (CLOS) 
- todo object "DTO"
- generic methods for I/O
  - call from http handler


** TODO Tagging
*** TODO UI
- [X] Want to be able to input new ones.
  - [X] Smallish textbox should work.
  - [X] +Needs to auto-generate the "next" textbox to allow for easy multiple entry.+
- [X] Want to be able to select existing ones from a list.
  - [X] Display the last 3 that were used.
  - [X] When typing in the tag input field, display existing ones based on what's typed.
**** TODO Tag rendering
- [X] Line 1: tag entry smallish textbox.
  - [X] Between todo entry and add button.
- [X] Line 2: Selected List.
  - [X] Associate selected tag with todo item.
  - [X] +Is there an ASCII checkmark that can go next to these?+
    - [X] Actually, we just need it for HTML, so use &#10003;
  - [X] +Need an x so we can delete them ... maybe a red x is enough?+
  - [X] Clicking on a selected tag will:
    - [X] remove it from the selected list
    - [X] remove it from association with the todo item
- [-] Line 3: Candidate List - 3 tags.
  - [X] Initially: the last 3 used tags.
  - [-] List changes to:
    - [X] Match the input in the todo field.
    - [ ] Less than 10 matches, fill out with however many of the last 10 are needed.
  - [-] Link to show all tags.
    - [ ] Put right beneath the tag area.
    - [X] +Once a tag is selected, close.+
    - [ ] There will be a close link for the tag area.
**** TODO Filtering
- [X] same basic UI layout - latest 10, input, selected tags
  - [X] When mapping the candidate tag layout, need:
    - [X] A distinct element ID.
    - [X] A different on-click handler.
- [X] put it *above* the existing filter
  - [X] +or maybe to the right of the existing filter?+
- [X] selecting a candidate tag makes a search happen
  - [X] search is conducted against the lookup list of tags and matches are displayed the same way Filter search results are
- [ ] enter a tag updates the list of 10 with matches
- [X] fonts
  - [X] increase 3 to 10
  - [X] make the font smaller
  - [X] keep the words further appart  
*** DONE Persistence
- [X] Tags file in every user folder.
- [X] Have a "lookup file" with todo ID/tag combos?
- [X] Should there be a tag ID?
*** TODO Tags as objects (how the app handles them in memory)
**** DONE Server
- [X] *note* todos are just lists, not CLOS objects.
- [X] I guess for now the representation can match the files.
  - [X] Tags in their own object.
  - [X] The todo/tag ID combos in their own object.
**** TODO Client
- [ ] BUG *select-tag-ids* and *filter candates* not updated when a tag is removed.
  - Especially noticeable on the import page.
  - Also very noticeable when filtering.
  - [ ] Fix for *select-tag-ids*
  - [ ] Fix for *filter candates*
- [ ] BUG update filter candidate tags after new one is added.  
- [ ] MASS data conversion: Convert "prefix" in each todo to a tag, and create the tag-todo association.
- [X] Remove line break from text of imported todos!
- [X] Import tags!
  - [X] Render tags.
  - [X] Associate tags with new todos when the Import button is clicked.
    - [X] Add a hidden field that gets refreshed whenever the selected tags variable is updated.
    - [X] Handle on the server side.
      - [X] Trace =transform-lines-to-todos= so we have a list to experiment with.
      - [X] Transform that list into the new todo IDs and return the list of IDs from =import-lines-into-todo-list=.
      - [X] Associate the list of tag IDs with the list of todo IDs and save!
- [X] We need the "add" input for filter tags so they can be typed / searched, and then we don't have to rely on hunt and peck.
  - Maybe make the render-tag-entry procedure "independent"?
  - We might already have it??
    - [X] Need to test!
- [X] *note* todos are json objects.
- [X] I guess for now the representation can match the files.
- [X] BUG add tag isn't working.
- [X] Allow for any vs all matches.
- [-] Render selected list when editing a todo.
  - [X] BUG Refresh updated tag associations.
  - [X] BUG Hide tags when done editting.
  - [X] BUG Tag elements get re-added!
    - But only twice...
  - [X] Save any editted associations.
  - [X] For these, the selected tags will display right away since they're already populated.
  - [ ] Layout should be the same - line 1: candidate tags, line 2: add new tag, line 3: selected tags.
    - [ ] Do NOT create a set of Tag html elements for each todo item.
      - [ ] Generate the tag elements on demand.
      - [ ] The elements can be pre-rendered and hidden.
        - [ ] Keep the parent element (ID) that the macro uses handy.
          - [ ] Pass it around to each todo item that's being edited.
      - [ ] Repopulate *just the data* on demand.
todo webapp - remove #\Return from imported todos

*** Starting Over!!
**** Strategy
- [X] Go through each new function, add an inline description, then add to the list here below, too.
- [X] Restore Data Structures.
  - [X] Restore server-side code.
  - [X] Restore client-side code.
    - [X] Data definitions.
    - [X] Fetches from server.
- [ ] Add client-side code.
  - Do "experimentation" first :)
    - Data List
      - *selected-tag-ids*
        - Tag IDs that are currently selected in the UI
      - *todos-filtered-by-tags*
        - todo objects filter by multiple tag IDs
      - *selected-filter-tag-todo-ids*
        - *I think* these are the tag/todo combinations currently selected in the UI to filter the todo list.
        - Saved as an App Setting
      - *filter-tag-match-type*
        - Is the current tag filter matching by *any* or *all*?
        - Saved as an App Setting
  - Experiment List
    - [X] Get selected tag IDs using *selected-tag-ids*
      - Does this or should this have a context?
      - Not used??
    - [X] Get todo items filtered by tags using *todos-filtered-by-tags*
    - [X] Get selected tag / todo combinations to filter the todo list using *selected-filter-tag-todo-ids*
    - [X] Get filter tag match type using *filter-tag-match-type*
    - [X] Set filter tag match type to any or all.
    - [ ] Filter the actual todos with the given list of todo IDs. The todo item list is filtered by tags.
    - [ ] Get todo items filtered by currently selected tag IDs (page level).
      - [ ] 'ANY just returns all todo items;
      - [ ] 'ALL returns todo items that match all the currently selected tags.
      - [ ] Shouldn't 'ANY return todo items with at least 1 match instead of an unfiltered list??
    - [ ] Search for todo items matching a tag;
    - [ ] Remove tag from the tag candidate list.
    - [ ] Add tag to a todo item's list of tags.
    - [ ] Delete a tag from a todo item's tag list.
  - Use cases
    *ADD ALL THE USE CASES HERE ... they should hopefully match up with most of the experiments*
    - [X] Get all candidate tags
      - Same for filters and todo items
      - Uses *tag-list*
    - [ ] Get global filter candidate tags
      - [ ] Make it an app setting
      - [ ] Initialize from the tag list
      - [ ] Refresh from the tag list if app setting empty
    - [ ] Get per todo item candidate tags - new todo
      - [ ] Create from tag list if new todo item
    - [ ] Get per todo item candidate tags - existing todo
      - [ ] Get from tag-dodo association list for current todo item
    - [ ] *Move* tag from candidate tag list to tag-todo filter list
      - "Global"
      - [ ] Move *back*
    - [ ] *Move* tag from candidate tag list to tag-todo list
      - Per Item
      - [ ] Move *back*
    - [ ] Get all tag-todo *filter* list
    - [ ] Get tag-dodo list per todo item
      - New items won't have a todo ID yet
        - Rely on UI element?
    - [ ] Get todo list filtered by tags
      - [ ] Any
      - [ ] All
      - [ ] None (no tags added to global filter)
- [ ] Manipulation of data structures.
  - [ ] These will use the lists fed to them, and return an updated list.
- [ ] Establsih orchestrators.
  - [ ] These will be context aware.
- [ ] Each of the 3 UI sections will have the same rendering logic.
***** code snippets
#+begin_src lisp
  ;; get candidate tags GLOBAL
  (defun get-global-filter-candidate-tag-ids (tag-list candidate-tag-ids)
    "Get tag IDs to use as candidates for the global filter"
    (if candidate-tag-ids
        (map* #'(lambda (tag) (ps:chain tag id)) candidate-tag-ids)
        tag-list))
  (get-global-filter-candidate-tag-ids (get-tag-list) app-settings-candidate-tag-ids)

  ;; get per todo item candidate tags - new todo
  (defun get-candidate-tag-ids-for-new-todo (tag-list candidate-tag-ids)
    "Get candidate tag IDs for new todo"
    (get-global-filter-candidate-tag-ids tag-list candidate-tag-ids))
  (get-candidate-tag-ids-for-new-todo (get-tag-list) app-settings-candidate-tag-ids)

  ;; Get per todo item candidate tags - existing todo
  ;; TAGLIST.filter(tag => !selectedTagsForTodo16.find(selectedTagId => selectedTagId == tag.id))
  (defun get-candidate-tag-ids-by-todo-id (tag-list tags-todo-association-list todo-id)
    "Get candidate tag IDs by todo ID"
    (let* ((selected-tag-ids (get-tag-id-list-by-todo-id tags-todo-association-list todo-id))
           (candidate-tag-ids (remove-if* #'(lambda (tag-id) (not (find* tag-id selected-tag-ids))) tag-list))) 
      candidate-tag-ids))

  (defun select-tag-id-from-tag-list-for-todo (tag-id)
    "Move tag ID from candidate tag list to tag-todo list."
    (setf candidate-tag-ids (remove* tag-id candidate-tag-ids))
    (setf selected-tags (push* tag-id selected-tag-ids))
    (push (create todo-id todo-id tag-id tag-id) tags-todo-association-list))


  ;; I have an implementation for this, and I think it works, but it's hard to understand
  (defun get-todo-list-filtered-by-tags (tags-todo-association-list todo-ids tag-match-type)
    "Get the list of todo items by tag-match-type"
    (case tag-match-type
      (any todo-ids) ;; only return the todo IDs if no tags selected for the filter
      (all
       (remove-if-not* #'(lambda (todo-id) todo-id)
                       (map* #'(lambda (todo-id) (get-todos-that-match-all-selected-tags todo-id)) todo-ids)))))
  
#+end_src
**** High level "rewrite"
***** Startup
#+begin_src lisp
    (fetch-data todo-list)
    (fetch-data tag-list)
    (fetch-data tag-list)
  (fetch-data tag-list)
#+end_src
**** Data structures
***** Todo Items
- Already exists.
***** Tag Items
- New.
***** Tag-Todo Items
- New.
- List of tag IDs grouped by the todo ID they're associated with.
- Todo IDs are unique.
- Tag IDs are unique /per todo ID/.
***** UI  
****** Common Elements
******* Candidate Tags
- Based on the list of Tag Items.
******* Tag Entry
- Input field to add new tags.
******* Selected Tags
- Tags selected for the current "Tag Context".
****** Tag Contexts
******* General Filter Tags
- Use in conjuction with:
  - Show/Hide Completed Items checkbox.
  - Text search box.
  - All / Any links.
    - New.
- Persist server side, same as other filter mechanisms.
******** Candidate Tags.
- From Tag Items list.
  - UI Rendering: Filter out anything in the list of selected tags for this context.
******** Add new tags
- Adds to Tag Items list.
- Adds to Selected Tags list.
  - re-render selected tags UI.
******** Selected Tags.
- Add from the Candidate Tags list.
  - Then re-render candidate tag list UI.
    - Remove will also trigger a re-render candidate tag list UI.
- Can save as part of per-user app settings.
******* Tags per Todo Item
- Subset of Tag-Todo Items.
- Manipulate the sub-section of the Tag-Todo items list.
******** Candidate Tags.
- From Tag Items list.
  - UI Rendering: Filter out anything in the list of selected tags for this context.
******** Add new tags
- Adds to Tag Items list.
- Adds to the Tag-Todo Items.
- Adds to Selected Tags list.
  - re-render selected tags UI.
******** Selected Tags.
- Render from Tag-Todo List for matching Todo ID.
- Add from the Candidate Tags list.
  - Then re-render candidate tag list UI.
    - Remove will also trigger a re-render candidate tag list UI.
******* Tags for a new Todo Item
- Manipulate the sub-section of the Tag-Todo items list.
******** Candidate Tags.
- From Tag Items list.
  - UI Rendering: Filter out anything in the list of selected tags for this context.
******** Add new tags
- Adds to Tag Items list.
- Will *NOT* add to the Tag-Todo Items.
- Adds to Selected Tags list.
  - re-render selected tags UI.
******** Selected Tags.
- This will create a new entry in the Tag-Todo List on the server once Todo item is added.
- Add from the Candidate Tags list.
  - Then re-render candidate tag list UI.
    - Remove will also trigger a re-render candidate tag list UI.

**** Existing flow
***** Tags
- init
  - get-todo-list-from-server
    - render-todo-list
      - render-tag-content-for-edit-todo
        - render-tag-content
          - render-tag-candidates
          - render-tag-entry
          - render-selected-tags <-- can pass todo-id argument for *edits*
  - render-tag-filter
    - render-tag-candidates
      - display-candidate-tag
    - search-for-tag
      - render-filter-tag-todos
        - render-selected-tags <-- has todo-id parameter, but only possible to pass it as an argument *sometimes*
**** Improved flow
***** Core Tag Display Area
- render-tag-candidates
- render-tag-entry
- render-selected-tags
***** Tag Display Area Containers
- Filter
  - Doesn't use render-tag-entry
- New Todo
- Edit Todo
***** Operations
****** Filter Todos
  - Get Selected Tags from Filter Container
****** Add Todo
  - Get Selected Tags from New Todo Container
****** Save Todo
  - Get Selected Tags from Edit Todo Container
**** Updated Flow
- init
  - render-tag-filter
    - render-tag-candidates
      - search-for-tag <-- click handler
        - render-filter-tag-todos
          - render-selected-tags <-- using saved tag-todo IDs
            - [X] Only use what's been added via the UI; no saved data
          - set-todos-filtered-by-tags <-- what is this? Is it necessary?? might be, ignore for now
          - render-todos-filtered-by-tags
    - render-selected-tags <-- using saved tag-todo IDs, but should we?? shouldn't this be an app setting?? and only during initial page load
      - [X] Pass [] for selected tag (ID)s on page load
        
  - get-todo-list-from-server -> render-todo-list
    - render-tag-content-for-edit-todo
      - render-tag-content (todo-id argument!)
        - render-tag-candidates
          - add-tag-to-selected-tags <-- click handler
            - remove-tag-from-candidate-list
            - get-selected-tag-ids-from-ui-elements
            - render-selected-tags <-- already selected + new tag from click event
        - render-tag-entry
        - render-selected-tags
          - remove-tag-from-selected
            
  - render-init
    - render-tag-content-for-new-todo (event handler)
      - render-tag-content
        - render-tag-candidates
          - add-tag-to-selected-tags <-- click handler
            - remove-tag-from-candidate-list
            - get-selected-tag-ids-from-ui-elements
            - render-selected-tags
        - render-tag-entry
        - render-selected-tags
          - remove-tag-from-selected

**** Filtering todos by tags!
***** No Tags selected in Filter
- [ ] Tags have no effect on todos
***** Tags Selected in Filter
****** Any
- [ ] Only Todos with at least 1 tag matching any tag in the Filter.
****** All
- [ ] Only Todos with all tags matching every tag in the Filter.
***** Existing Operations
- init
  - set-filter-tag-match-type-and-re-render-filter
    - render-filter-tag-todos
      - set-todos-filtered-by-tags <-- this seems suspicious
      - render-todos-filtered-by-tags
        - render-todo-list
- click-handler for 'any
  - set-filter-tag-match-type-and-re-render-filter
    - render-filter-tag-todos
      - set-todos-filtered-by-tags <-- this seems suspicious
      - render-todos-filtered-by-tags
        - render-todo-list
- click-handler for 'all
  - set-filter-tag-match-type-and-re-render-filter
    - render-filter-tag-todos
      - set-todos-filtered-by-tags <-- this seems suspicious
      - render-todos-filtered-by-tags
        - render-todo-list

- search-for-tag <-- click handler
  - render-filter-tag-todos
    - set-todos-filtered-by-tags <-- this seems suspicious
    - render-todos-filtered-by-tags
      - render-todo-list

- render-selected-tags
  - remove-tag-from-selected <-- click handler
    - render-filter-tag-todos
      - set-todos-filtered-by-tags <-- this seems suspicious
      - render-todos-filtered-by-tags
        - render-todo-list

- remove-tag-from-todo <-- *UNREFERENCED*
  - render-filter-tag-todos
    - set-todos-filtered-by-tags <-- this seems suspicious
    - render-todos-filtered-by-tags
      - render-todo-list

  


**** TODO remaining fixes
- [ ] Check older list of bugs, etc
- [X] Filtering needs to be tweaked.
  - [X] Any
    - Haven't observed any issues with this one *yet*.
  - [X] All
    - Doesn't seem to filter exclusively enough.
- [X] Removing a tag from the selected in filter area doesn't update the filtered todos.
- [X] Need to check that data is still saved correctly on the server.
  - [X] Tag todo data not getting posted.
    - [X] Existing todos
    - [X] New todos
- [X] Make sure the image still builds properly.
  - [X] No "star" functions in the Javascript.
  - [X] No errors in the F12 console.
***** Properly selecting all todo IDs that are paired with a tag that matches a tag ID in the global filter
#+begin_src lisp
  (let* ((selected-tag-ids (get-selected-tag-ids "filter-"))
         (todo-ids (get-all-todo-ids))
         (tag-todos (get-all-tag-todos))
          (tag-todo-matches-selection (lambda (tag-todo) (gte (position-if* (lambda (selected-tag-id) (= selected-tag-id (ps:@ tag-todo id))) selected-tag-todo-ids) 0)))
         (matching-tag-todos (remove-if-not* #'tag-todo-matches-selection tag-todos))
         (matching-todo-ids (map* #'(lambda (tag-todo) (ps:@ tag-todo todo-id)) matching-tag-todos))
         (todo-matches-selection (lambda (todo) (gt 0 (position-if* (lambda (todo-id) (= todo-id (ps:@ todo id))) matching-todo-ids))))
         (matching-todos (remove-if-not* #'todo-matches-selection (get-all-todos))))
    (render-todo-list matching-todos))

  (defun get-todos-matching-all-selected-tags (matching-todos matching-tag-todos selected-tag-ids)
    (let ((tag-id-matches-selected-by-todo (lambda (tag-todo) (gte (position-if* (lambda (tag-id) (= tag-id (ps@ tag-todo tag-id))) selected-tag-ids)))))
      (remove-if-not* (lambda (todo) (every* #'tag-id-matches-selected-by-todo) (remove-if-not* (lambda (tag-todo) (= (ps:@ todo id) (ps:@ tag-todo todo-id))) matching-tag-todos)) matching-todos)))
#+end_src

#+begin_src sql
  select *
  from matching-todos t
  inner join matching-tag-todos tt on t.[todo-id] = tt.[todo-id]
  where exists(select 1 from selected-tag-ids s where s.tagId = tt.tagId)
#+end_src

****** DONE try debugging =get-filter-todo-ids= in the browser
- Suspicion: maybe the "when" isn't returning t/f as expected.
****** js
#+begin_src js
    // get all the tag todos matching the selected tags 
  let matchingTagTodos = getAllTagTodos().filter(tagTodo => getCurrentlySelectedTagIds("filter-").findIndex(selectedTagId => selectedTagId == tagTodo.tagId) >= 0)
  // todos matching any tag
  let todosMatchingAny = getAllTodos().filter(todo => matchingTagTodos.findIndex(tagTodo => tagTodo.todoId == todo.id) >= 0)
  // todos matching all
  let todosMatchingAll = ????
      /*
     ,*** IDEA ***
     tag-todo pairs: flatten tag list per todo
     flattened = {todoId: 123, tagIds: [1, 2, 3, 4]} 
     flattened.filter(flat => flat.tagIds.every(tagId => getCurrentlySelectedTagIds('filter-').findIndex(selectedTagId => selectedTagId == tagId) > 0)
        ,*/
#+end_src
******* How to flatten an associated list in Lisp
#+begin_src lisp
  (defparameter todos (list
                       (list '(id . 1) '(name . "one"))
                       (list '(id . 2) '(name . "two"))
                       (list '(id . 3) '(name . "three"))))

  (defparameter tag-todos (list
                             (list '(todo-id . 1) '(tag-id . 3))
                             (list '(todo-id . 1) '(tag-id . 4))
                             (list '(todo-id . 2) '(tag-id . 3))
                             (list '(todo-id . 3) '(tag-id . 4))))

  (mapcar
   (lambda (todo)
     (list
      (cons 'todo-id (cdr (assoc 'id todo)))
      (cons 'tag-ids
            (mapcar
             (lambda (tag-todo)
               (cdr (assoc 'tag-id tag-todo)))
             (remove-if-not
              (lambda (tag-todo)
                (= (cdr (assoc 'id todo)) (cdr (assoc 'todo-id tag-todo))))
              tag-todos)))))
   todos)

  ;; => (((TODO-ID . 1) (TAG-IDS 3 4)) ((TODO-ID . 2) (TAG-IDS 3)) ((TODO-ID . 3) (TAG-IDS 4)))
#+end_src
******* Another key idea: filter from the standpoint of the selected tag IDs - do *they* find a match for each one of themselves??
******* Get just the todos with tags that match all of the selected tags
#+begin_src lisp
  (remove-if-not (lambda (todo+selected-tag-flag) (not (null (cdr todo+selected-tag-flag))))
                 (mapcar (lambda (todo+selected-tag-flags) (cons (car todo+selected-tag-flags) (every #'identity todo+selected-tag-flags)))
                         (mapcar
                          (lambda (todo-with-flat-tag-ids)
                            (cons
                             (cdr (assoc 'todo-id todo-with-flat-tag-ids))
                             (mapcar
                              (lambda (selected-tag-id)
                                (position-if (lambda (tag-id) (= selected-tag-id tag-id)) (cdr (assoc 'tag-ids todo-with-flat-tag-ids))))
                              selected-tag-ids)))
                          todos-with-flattened-tag-ids)))
#+end_src
***** TODO Imports
- [X] Maybe get rid of list name?
  - [X] OR, make it truly optional and don't add in a default list name.
- [ ] After entering imports, can we update the fiter to match the tags used on the import screen?
  - It would only work if we save the selected tag IDs as an app setting.
    - Maybe we should do that? (can be in the next stage, though)
***** TODO Tags
- [-] Show only the 10 most used.
  - [-] Keep an MRU to track usage.
    - [X] If no MRU yet, get the top 10 tags in terms of associated todo items
      - Can easily get that count from tag todo pairs.
    - [ ] Add 1 when a tag is selected for the global filter.
    - [ ] Subtract 1 when a tag is removed from the global filter.
  - [X] +Initially it will just be the ones I pick.+
  - [X] Make sure search still works even for "hidden" tags.
- [X] Have a "show all" option.

****** TODO re-rendering todos
******* render-filter-tag-todos
- renders todo list based on tags
  - honors filter text
******* render-todo-list
- renders todo list based on filter text
  - doesn't look at tags
******* catalog for render-todo-list
- todo-project/client/ui.lisp:85:    (render-todo-list filtered-todos)
  - filter-todos - called by filter button on-click event
  - looks like the filtering logic is duplicated in filter-todos
  - [X] try calling (render-filter-tag-todos "filter-") from here
- todo-project/client/ui.lisp:131:    (render-todo-list filtered-todos)
  - called by render-todos-filtered-by-tags
- todo-project/client/app-settings.lisp:47:        (render-todo-list (get-all-todos)))))
  - [X] we can call (render-filter-tag-todos "filter-") from here
- todo-project/client/todo.lisp:65:        (render-todo-list (get-all-todos))
  - add-todo
  - [X] try calling (render-filter-tag-todos "filter-") from here
- todo-project/client/todo.lisp:79:      (render-todo-list server-todo-list)
  - get-todo-list-from-server
  - [X] try calling (render-filter-tag-todos "filter-") from here
- todo-project/client/todo.lisp:108:  (render-todo-list (get-all-todos))
  - update-todo-from-edit
  - [X] try calling (render-filter-tag-todos "filter-") from here
- todo-project/client/todo.lisp:115:  (render-todo-list (get-all-todos))
  - delete-todo-by-id
  - [X] try calling (render-filter-tag-todos "filter-") from here
***** TODO filter display
****** filter area
- (:div :id "todo-filter")
  - who-html for the div with global filter tags and filter text
    #+begin_src javascript
      // hide the filter area - one way to do it, reference other code for how to toggile visibility, like for the input to add a new toddo item
      document.getElementById("todo-filter").hidden = true
    #+end_src
- hides everything
  - Not sure if this would work well or not
    #+begin_src javascript
      document.getElementById("todo-filter").parentElement.hidden=true
    #+end_src
  - This could also work
    #+begin_src javascript
      document.getElementById("todo-list-area").hidden=true
    #+end_src
***** Unused functions
     add-tag-to-todo # commented out
     remove-tag-from-todo
     get-todos-filtered-by-tags-for-single-todo-id
     get-filter-tags
     get-tags-todo-association-list-by-tag-id
     get-todo-id-list-from-tag-todos

#+HEADERS: :classname MyTest2
#+BEGIN_SRC java
  public class MyTest2 {
      public static void main(String[] args) {
          System.out.println("Hello, World!");
      }
  }
#+END_SRC

#+RESULTS:
: Hello, World!
* Todo Page Organization as of <2023-05-04 Thu>
** Header
- <div id="app-settings">
*** Hide Done Items
<div><input type="checkbox" id="hide-done"></div>
*** Menu Links
- <div><span /></div></div>
** Todo List for YOUR NAME
- Does this <div> really contain everything outside of the header?!?
  - It does!
- <div><h1 />
*** Todo Items n / N
- <div id= "todo-list-area"><h2><table id= "todo-list"><thead "To-do Items">
**** Body
- <tbody id="todo-list-body"></table></h2></div>
***** Todo List
*** Filter
- <div id="todo-filter" />
*** Tag General Filter List (going away)
- <div>
**** Candidates (going away)
- <div id="filter-tag-candidate-area">
  - <div id="filter-tag-candidates" />
  - <div id="filter-tag-candidates-selected">
***** Tag Summary (new!)
   - <div id="filter-selected-tags">
****** Filter ANY | ALL
     - <div />
****** seleted filter taga
     - <span>Tag Name</span>
     - </div></div>
***** General Filter Text
- <div>
  - <input id="todo-filter-text" />
****** Filter Button
  - <button>Filter</button></div>
*** New Todo Textarea
- <div><textarea id="todo-content" />
**** New Todo Tag area
- <div id="new-todo-tag-content">
***** New Todo Tag Candidates
- <div id="new-todo-tag-candidates" />
***** New Tag input
***** New Todo selected tags
*** Add and Import buttons
- <button id="todo-add-btn" />
- <button>Import...</button>
** DONE Next set of changes <2023-05-13 Sat>
- [X] There are 2 "filter-selected-tags".
  - One of them is in the *newly independent* =render-tag-entry= (ln 129)
    - Called directly from =init=.
      - I think we want to keep this one.
  - One of them is in the *newly created* =render-tag-summary= (ln 242)
    - Called directly from =init=.
    - [X] Removed
  - One of them is in the *existing* =render-tag-filter= (ln 253)
    - Called directly from =init=.
      - Maybe this is the one we *get rid of*.
  - One of them is in the *existing* =render-tag-content= (ln 484)
    - This one isn't used as part of filtering - it's used with entry.
  - [X] Only display *one*.
  - Ideal layout
    - [X] Selected tags
    - [ ] Add new / tag filter input area.
      - [ ] Make search-tags independent.
      - [ ] Make render-tag-entry independent.
	- [ ] Change add button to clearly say "Add New Tag".
    - [X] Candidate area
      - [X] Change position
      - [X] Get rid of show more / less
        - Made it default to "show less"
- [X] Go back to "main" todo screen when done with tags.
** DONE Changes starting on <2023-05-05 Fri>
- [X] Add ID to for "todo-new-entry-and-import"
- [X] Make new hidden div "tag-filter-content"
- [X] Make "todo-list-area", "todo-list-filter", "todo-new-entry-and-import" hideable when tag summary is clicked
- [X] Extract "filter-tag-candidate-area" from out of "todo-list-filter" and move it to "tag-filter-content"
** DONE Immediate fix discovered <2023-05-08 Mon>
- [X] Why aren't selected tags visible??
* Import Page Organization as of ???
* TODO tag UI re-design <2023-04-04 Tue 22:03>
** TODO Main Screen (todos)
- [ ] only display selected tag names
  - [ ] If none selected, show "Tags ..."
- [ ] tap / click a tag shows tag screen
  - Show candidates + selected, similar to RENDER-TAG-FILTER
    - Hide eveything else at the same time.
      - See :not selector, as in here: https://stackoverflow.com/questions/52557181/exclusive-css-selector
      - +Or just do a (big) modal?+
*** TODO New todo
- [ ] make current tag selection the default tags for a new todo.
- [ ] if different tags are selected, then *those* become the default.
- [ ] Show the word "Tags..."
  - [ ] Tap / click to reveal the Tag UI
** TODO Tag UI
- [ ] Tags have their own screen to themselves.
- [ ] We can start out with the same layout we have now.
*** TODO New
**** TODO Sorting
 - [ ] By most frequently used.
 - [ ] By alphabetical order.
 - [ ] Represent by labels at the top and bottom
 - [ ] Each subsequent label tap / click toggles asc / desc for that sort.
**** TODO Todo text
- [ ] Display the text so it can be seen which item is being updated.
  - [ ] Handle new todos appropriately.
* DONE issues as of <2023-05-30 Tue>
- [X] If no selected tags, impossible to bring up tag screen
  - Because the click handler was added to each entry.
    - [X] Can we add the click handler to the div / container element?
    - [X] Change text if not tags selected
- [X] "Tags associated with this todo item"
  - Why does it say that??
* DONE Issues as of <2023-06-07 Wed>
- [X] When adding a new todo, tags double up.
  - Code: =(add-associate-tags-to-todo next-id (get-currently-selected-tag-ids "new-todo-"))=
    - [X] Find out how are the tags for "new-todo-" getting set?
    - [X] is =get-currently-selected-tag-ids= innocent?
      - It *looks* innocent ...
    - [X] is =add-associate-tags-to-todo= innocent?
      - Yes, it is.
- [X] Auto-populate the tags for new todos with the globally selected todos.
  - [X] Use =get-currently-selected-tag-ids=.
  - [X] Add those tag IDs to where they would've been added by the click handler
    - It's called =move-tag-from-candidate-to-selected=
    - Use like this =(move-tag-from-candidate-to-selected tag id-prefix)
      - =(remove-if-not* (lambda (tag) (find* (ps:@ tag id) (get-selected-filter-tag-ids))) (get-all-tags))=
- [X] An item without any tags is filtered out.
* TODO Issues as of <2023-07-03 Mon>
- [X] After adding an item the list doesn't refresh with the new item.
- [-] Still need to apply new tag UI to todo adds and edits.
  - [X] Add close link to selected tags box
    - It should
      - [X] In =render-tag-summary=, instead of unconditionally calling =get-selected-filter-tag-ids= as an argument to =render-selected-tags-summary=, 
	- call whatever we need for new-todo if that's the current context.
	  - Call this: =(get-currently-selected-tag-ids "new-todo-")=
	    - Which is also being called in =return-from-tag-ui=
	- =get-selected-filter-tag-ids= gets its info from global selected-filter-tag-ids
      - [X] What happens when you click a selected tag in the tag UI?
	- [X] Make sure it gets reflected in the new-todo-summary selected tags
      - [X] run showTagArea("new-todo-", false)
      - [X] initialize the selected summary
	- [X] The "new-todo-" selection summary should default to the global if nothing has been selected yet.
	  - [X] Only do this once
	    - Per page load.
	    - Even better would be when the global filter's selection has changed.
	  - [X] Subsequent selection should honor user input.
            - How it works now *summary*
              - render-tag-summary
                - (render-selected-tags-summary (get-selected-filter-tag-ids) summary-tag-id-prefix)
                  - get-selected-filter-tag-ids data ultimately derives from the *global* selected tag ID list
            - How it works now *tag ui*
              - init
                - render-tag-area
                  - (render-selected-tags (get-currently-selected-tag-ids id-prefix) id-prefix)
                    - get-currently-selected-tag-ids gets its "data" from UI elements
                      - [ ] We need to call this to (re-)populate the summary, especially after we "close" the tag UI
    - [X] update the selected summary
  - [ ] Implement for todo edits
    - When running =(render-tag-area "edit-todo-0-")= the "-selected" element isn't found.
      - It exists for "new-todo-".
	- Where / How does "new-todo-" generate the "-selected" element?
	  - =RENDER-TAG-AREA= is where =new-todo-selected-tags= is generated - on page load.
	  - =RENDER-TAG-FILTER-UI= is where =new-todo-tag-candidates-selected= is generated.
	    - "this is the new one"
	    - called from =GET-APP-SETTINGS-FROM-SERVER= in the local callback.
	    - called on page load.
      - [ ] Need a version of the flet =RENDER-TAG-FILTER-UI-BY-AREA= for "edit-todo-N".
	- [ ] It has to be dynamically generated everytime so that if the todo list is regenerated client side, the tags UI for it also is without any clashes.
	  - [ ] So whenever we render the "edit-todo-" stuff, we can also (re-)render the tags UI for that todo.
	  - [ ] Test by calling:
	    - [ ] The new function - call it =RENDER-TAG-FILTER-UI-BY-AREA-INDEPENDENT= for now
	    - [ ] Then =renderTagArea("edit-todo-1-");= in JS.
	    - [ ] Then =populateSelectedTagsContentAreaForTodos("edit-todo-1-", 925);=, also in JS.
	  - [ ] Why doesn't render-tag-summary work?
	    - [ ] Look at placeholder "????" - what's supposed to go there??
      - I think fixing this will also fix =(populate-selected-tags-content-area-for-todos "edit-todo-0-")=
- [ ] Can't add new tags when adding a todo
  - Available for the global filter though ...
    - Adding a new tag goes at the bottom the Tag UI
* TODO Starting of Tags UI <2023-09-05 Tue>
** General Plan 
*** Remove existing tag functions
- [ ] Start out by emptying all of them.
- [ ] Possibly delete them completely.
- [ ] Come up with different flow for tag UI.
- [ ] What about data structures?
  - Will figure it out as we do the data operations.
*** Layout
- I like the basic layout /ideas/ that I have implemented.
- It's just a matter of fixing the logic, really.
** Logic
*** Global Filter
**** Background
- App Settings contains these fields
  - SELECTED-FILTER-TAG-IDS
    - tag IDs
  - FILTER-TAG-MATCH-TYPE
    - "all", "any"
**** Requirements
- [ ] On App Settings load, populate and display the global filters.
***** Data Requirements
- [ ] Load tags list from server tag list.
  - [ ] Fill out what the operations are for this.
    - [ ] How to access the global tag list.
    - [ ] How to update the global tag list.
    - [ ] How to get the list of global tags that aren't selected for the global filter.
- [ ] Load selected tags for the global filter from App Settings.
  - [ ] Fill out what the operations are for this.
    - [ ] How to access the selected global filter tag list.
    - [ ] How to update the selected global filter tag list.
- [ ] Tag Input.
  - [ ] Filter candidate tags.
  - [ ] Add new tag.
    - [ ] To global tag list.
    - [ ] To selected tags.
***** Display Requirements
  - [ ] Display tag summary.
    - [ ] Click the tag summary
      - [ ] Hides everything except for Tag UI.
    - [ ] Display selected tags.
      - [ ] Get tags from selected global filter tag list.
    - [ ] Display UI to filter candidate tags and add new tags.
      - +Note: this is *new* ... not currently doing this!+
    - [ ] Display candidates tags.
      - [ ] Get tags from the global tag list that aren't already selected.
*** New Todo
**** Background
- There is a tag-todo list with all the todo/tag ID pairs.
**** Requirements
***** Data Requirements
- [ ] Load tags list from server tag list.
  - This will feed the tag candidates list.
  - [ ] How to access the tag candidates list for the *new todo*.
  - [ ] How to update the tag candidates list for the *new todo*.
- [ ] Load selected tags for the global filter from App Settings.
  - [ ] The new todo *defaults* will be the same as the global filter.
    - [ ] How to access the selected tag list for the *new todo*.
    - [ ] How to update the selected tag list for the *new todo*.
- [ ] Tag Input.
  - [ ] Filter candidate tags for *new todo*.
  - [ ] Add new tag.
    - [ ] To *global* tag list.
    - [ ] Update candidate tag list for *new todo*.
    - [ ] To selected tags for *new todo*.
***** Display Requirements
- [ ] On New Todo UI load, *immediately* show Tag Summary.
  - [ ] Display tag summary *immediately*.
    - [ ] Click the tag summary
      - [ ] Hides everything except for Tag UI.
    - [ ] Display selected tags.
    - [ ] Display UI to filter candidate tags and add new tags.
    - [ ] Display candidates tags.
*** Edit Todo
**** Background
- There is a tag-todo list with all the todo/tag ID pairs.
**** Requirements
***** Data Requirements
- [ ] Load tags list from server tag-todo list for *current todo item*.
  - This will feed the tag candidates list.
  - [ ] How to access the tag candidates list for the *current todo item*.
  - [ ] How to update the tag candidates list for the *current todo item*.
- [ ] Load selected tags for the global filter from App Settings.
  - [ ] The new todo *defaults* will be the same as the global filter.
    - [ ] How to access the selected tag list for the *current todo item*.
    - [ ] How to update the selected tag list for the *current todo item*.
- [ ] Tag Input.
  - [ ] Filter candidate tags for *current todo item*.
  - [ ] Add new tag.
    - [ ] To *global* tag list.
    - [ ] Update candidate tag list for *current todo item*.
    - [ ] To selected tags for *current todo item*.
***** Display Requirements
- [ ] On New Todo UI load, *immediately* show Tag Summary.
  - [ ] Display tag summary *immediately*.
    - [ ] Click the tag summary
      - [ ] Hides everything except for Tag UI.
    - [ ] Display selected tags.
    - [ ] Display UI to filter candidate tags and add new tags.
    - [ ] Display candidates tags.
** All Data Operations
*** General
- [X] Get all tags
#+begin_src lisp
(get-all-tags)
#+end_src
- [X] Get all tag-todo items.
#+begin_src lisp
(get-all-tag-todos)
#+end_src
*** Global Filter
- [ ] Get Global Filter Tag Candidates.
#+begin_src lisp
  ;; get the tags from (get-all-tags) that haven't been selected yet
  (block 'existing
  (let ((show-more (tag-mru-items 'get-show-more))
		      (candidate-tags-all-or-top (if is-search candidate-tags (if show-more (get-all-tags) (tag-mru-items 'get-tags-in-mru candidate-tags)))))
    (remove-if-not*
     (lambda (tag) (< (position-if* (lambda (app-tag-id) (= (ps:@ tag id) app-tag-id)) (get-selected-filter-tag-ids))
		      0))
     candidate-tags-all-or-top)))

  (block 'new!
    (define-for-ps get-candidate-tags (tags selected-tag-ids)
      (flet ((tag-id-in-selected-tag-ids (tag)
	       (<
		(position-if* (lambda (tag-id) (= (ps:@ tag id) tag-id)) selected-tag-ids)
		0)))
	(remove-if-not* #'tag-id-in-selected-tag-ids tags))))
#+end_src
- [ ] Get Global Filter Selected Tags.
#+begin_src lisp
;;; current
(get-selected-filter-tag-ids)

;;; new
***same***
#+end_src
- [-] Update Global Filter Tag Lists.
  - [X] Move tag from candidates to selected.
    - *Current*: move-tag-from-candidate-to-selected
    - *New*: need to split move-tag-from-candidate-to-selected between data and UI
      - move-tag-from-candidate-to-selected - wrapper
	- move-tag-id with args for candidates and selected and tag-id
      - update-tag-ui-for-move-tag-from-candidate-to-selected
	- Similar to current move-tag-from-candidate-to-selected, but might change "id-prefix"
  - [X] Move tag from selected to candidates.
    - *Current*: ??
    - *New*: move-tag-id
  - [ ] Add newly input tag to candidate list.
    - This might be "automatic".
    - *Current*
      - =RENDER-TAG-ENTRY=
	- Create elements to support adding new tags.
	- =ADD-TAG ID-PREFIX=
	  - click handler.
    - *New*
      - ***SAME***
      - /but/ we might want to separate the data and UI parts.
  - [ ] Add newly input tag to selected list.
    - Same as previous.
*** New Todo
- [X] Get Global Filter Tag Candidates.
  - [X] Has to reflect what's been selected.
    - [X] Even if not saved permanently yet.
- [X] Get Global Filter Selected Tags.
  - [X] Has to reflect what's been selected.
    - [X] Even if not saved permanently yet.
- [-] Update New Todo Tag Lists.
  - [X] Move tag from *new todo* candidates to selected.
  - [X] Move tag from *new todo* selected to candidates.
  - [-] Add newly input tag to *new todo* candidate list.
    - [X] Data: add tag ID to list
      - Used adjoin.
    - [ ] UI
      - [ ] Should call the data part.
      - [ ] Do necessary UI manipulations.
  - [ ] Add newly input tag to *global* candidate list.
    - This might be "automatic".
  - [ ] Add newly input tag to *new todo* selected list.
  - [ ] Add selected todos to *new todo*'s tag list when saving.
*** Edit Todo
- [ ] Get Tag Candidates for *current todo item*.
  - [ ] Has to reflect what's been selected.
    - [ ] Even if not saved permanently yet.
- [ ] Get Selected Tags for *current todo item*.
- [ ] Update Tag Lists for *current todo item*.
  - [ ] Move tag from *current todo item* candidates to selected.
  - [ ] Move tag from *current todo item* selected to candidates.
  - [ ] Add newly input tag to *current todo item* candidate list.
  - [ ] Add newly input tag to *global* candidate list.
    - This might be "automatic".
  - [ ] Add newly input tag to *current todo item* selected list.
  - [ ] Add selected todos to *current todo item*'s tag list when saving.
    - It should be more of a "replace" than an "add".
** Existing
*** init
**** get-app-settings-from-server
***** render-app-settings
- (init-selected-filter-tag-ids (@ app-settings selected-filter-tag-ids))
- (setf *filter-tag-match-type* (@ app-settings filter-tag-match-type))
***** render-tag-filter-ui
- "render html elements for tag filter - *this is the new one*"
**** render-tag-filter
- (get-element-by-id "filter-tag-candidates")
- (parent-element (ps:chain document (get-element-by-id (+ (ps:@ filter-tag-candidates-area id) "-selected"))))
- (render-tag-candidates (get-all-tags) filter-tag-candidates-area candidate-tag-id-prefix #'search-for-tag)
- +*note* currently *don't* have the tag input for the global input.+
- (render-selected-tags (get-currently-selected-tag-ids candidate-tag-id-prefix) candidate-tag-id-prefix)
**** render-tag-entry "filter-"
**** render-tag-summary "filter-"
**** render-tag-area "new-todo"
- Similar to render-tag-filter
*** "filter" <button-click>
**** filter-todos
***** render-filter-tag-todos
****** render-todos-filtered-by-tags
******* (render-todo-list filtered-todos)
*** render-tag-content - *UNREFERENCED*
*** get-todos-matching-all-selected-tags
*** render-tag-summary "Renders page level tag filter summary."
*** show-tag-area
- toggle visibility for UI elements
*** return-from-tag-ui
- return link handler
*** All tag functions
render-tag-filter-ui-by-area-independent
render-tag-filter-ui
render-tag-entry
get-filter-tag-match-type
render-filter-tag-match-type
set-filter-tag-match-type-and-re-render-filter
render-todos-filtered-by-tags
get-filter-todo-ids
search-for-tag
render-filter-tag-todos
get-todos-matching-all-selected-tags
render-tag-summary
render-tag-filter
render-tag-area
get-tag-content-area-element
show-tag-area
render-selected-tags-summary
return-from-tag-ui
render-selected-tags
remove-tag-from-candidate-list
- get-currently-selected-tag-ids
  - meant to work with multiple
  - "Get selected tags from UI elements."
    - booo!
move-tag-from-candidate-to-selected
remove-tag-from-selected
remove-tag-from-todo
display-candidate-tag
render-tag-candidates
render-tag-content-for-new-todo
render-tag-content-for-edit-todo
populate-selected-tags-content-area-for-todos
render-tag-content
render-tag-content-for-import-todo
tag-items
get-all-tags
get-tags-matching-search-input
get-tag-id-list-by-todo-id
add-selected-tag-id-to-selected-filter-tag-ids
adjoin-selected-tag-id-to-selected-filter-tag-ids
send-new-tag-item-to-server
get-filter-tags
selected-tag-ids-for-current-todo
get-all-selected-tag-ids-for-current-todo
get-tag-list-from-server
add-tag
tag-todo-items
get-all-tag-todos
get-tags-todo-association-list-by-tag-id
get-tag-todo-index-by-id
remove-tag-todo-by-index
get-todo-id-list-from-tag-todos
send-new-tag-todo-item-to-server
send-new-tags-todo-item-to-server
send-updated-tags-todo-item-to-server
delete-tag-todo-item-on-server
get-tag-todo-associaton-list-from-server
add-associate-tags-to-todo
edit-associate-tags-to-todo
add-associate-tag-to-todo
delete-tag-todo
selected-filter-tag-ids
get-selected-filter-tag-ids
init-selected-filter-tag-ids
remove-tag-id-from-selected-filter-tag-ids
tag-mru-items
get-tag-mru
get-tag-mru-list-from-server
get-todos-filtered-by-tags-for-single-todo-id
* TODO Next things to look at
** TODO todo edit
 - [ ] Seems to be showing the same tags as the global filter.
   - Even after clicking on the tags.
 - [ ] Position of the tag summary for the todo chosen for edit
   - [ ] Why does it always show up at the top?
   - [ ] Can we get it to display below the todo that we want to edit?
** TODO global filter
- [ ] Click on the global tag summary -> add / remove tags -> return to main screen -> the global filter doesn't always match the changes in the tag UI screen.
* TODO Forgot Password
* TODO Reset Password
* macros to use at some point (from *ME*)
#+begin_src common-lisp
(ps:defpsmacro scase-with-do* (str &rest body)
  "Shortand for JS version of SCASE"
  (flet ((get-cond-expressions (str)
	   (let ((result-var ()))
	     (dolist (item body (nreverse result-var))
	       (if (equal 't (car item))
		   (push `(t ,(cadr item)) result-var)
		   (push `((= ,str ,(car item)) ,(cadr item)) result-var))))))
    (let ((str-var (gensym))
	  (str-val str))
      `(let ((,str-var ,str-val))
	 (cond
	   ,@(get-cond-expressions str-var))))))

(defmacro scase-with-do (str &rest body)
  "Shortand for JS version of SCASE"
  (flet ((get-cond-expressions (str)
	   (let ((result-var ()))
	     (dolist (item body (nreverse result-var))
	       (if (equal 't (car item))
		   (push `(t ,(cadr item)) result-var)
		   (push `((string-equal ,str ,(car item)) ,(cadr item)) result-var))))))
    (let ((str-var (gensym))
	  (str-val str))
      `(let ((,str-var ,str-val))
	 (cond
	   ,@(get-cond-expressions str-var))))))
#+end_src
